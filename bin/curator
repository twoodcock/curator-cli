#!/usr/bin/perl
use strictures;
use lib 'lib/';

use App::Curator;
use Getopt::Long;
use Pod::Usage;
my %opt = (
  config => 'curator.yaml'
);
GetOptions(
  'help|?' => \$opt{help},
  'list|l:s' => \$opt{list},
  'article|a:s' => \$opt{article},
  'blog|b:s' => \$opt{blog},
  'status:s' => \$opt{status},
  'metadata|m' => \$opt{metadata},
  'publish-to|pt' => \$opt{'publish-to'},
  'publish|p' => \$opt{'publish'},
  'config|c:s' => \$opt{config},
);

if ($opt{help}) {
  pod2usage(1);
}

my $app = App::Curator->new(config_file => $opt{config});

if ($opt{list}) {
  if ($opt{list} eq 'articles') {
     my %filter;
    my @list;
    if ($opt{blog}) {
      $filter{blog} = $opt{blog}
    }
    if ($opt{status}) {
      $filter{status} = $opt{status}
    }
    print join("\n", $app->article_list(%filter), "")
  } elsif ($opt{list} eq 'blogs') {
    for my $key ($app->blog_names) {
      print "$key\n"
    }
  } else {
     warn "Invalid list request.\n";
     pod2usage(-verbose=>0 );
  }
} elsif ($opt{metadata}) {
  if ($opt{article}) {
    my $article = $app->article($opt{article});
    print "$opt{article}\n";
    print indent($article->metadata->as_yaml);
  }
} elsif ($opt{status}) {
  $app->articles_with_setting(status => $opt{status})
} elsif ($opt{'publish-to'}) {
  my $article = $app->article($opt{article});
  print "$opt{article} will publish to:\n\n";
  for my $key ( $article->metadata->blog_list) {
    if (my $blog = $app->blog($key)) {
      print indent($blog->as_string());
      print indent(sprintf("file path: %s\n\n", File::Spec->catfile($blog->publish_path, $article->path)))
    } else {
      warn "$opt{article}: no blog found for pubish key '$key'\n";
    }
  }
} elsif ($opt{'publish'}) {
  my %pub_args;
  $pub_args{blog} = $opt{blog} if $opt{blog};
  $pub_args{article} = $opt{article} if $opt{article};
  $app->publish(%pub_args);
}

sub indent {
  my ($text) = @_;
  $text =~ s{^}{  };
  $text =~ s{\n}{\n  }g;
  $text =~ s/  $//;
  return $text;
}

=head1 NAME

curator - articule curation cli

=head1 SYNOPSIS

  curator --help

  # Specify a configuration file:
  curator -c 'config.yaml'

  # List commands:
  curator -l[ist] articles
  curator -l[ist] blogs
  curator -s draft|published

  # Show commands:
  curator -m[etadata] -a {article}
  curator --pt -a {article}

  # Publish articles to all blogs.
  curator -c 'config.yaml' --publish

=head1 OPTIONS

=over

=item B<--help>

Print a help message.

=back

=item B<-l> articles|blogs

(B<--list>)
List articles ore blogs.

=item B<-c> config.yaml

(B<--config>)
Specify the configuration file.

=item B<-s> draft|published

(B<--status>)
List articles with the given status.

=item B<--pt> -a {article}

(B<--publish-to>)
List articles with the given status.

=item

=cut
